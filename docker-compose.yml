# version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: humor-game-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-humor_memory_game}
      POSTGRES_USER: ${DB_USER:-gameuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-gamepass123}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/combined-init.sql:/docker-entrypoint-initdb.d/01-combined-init.sql
    # SECURITY: Database port not exposed in production
    # ports:
    #   - "5432:5432"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-gameuser} -d ${DB_NAME:-humor_memory_game}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: humor-game-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-gamepass123}
    volumes:
      - redis_data:/data
    # SECURITY: Redis port not exposed in production
    # ports:
    #   - "6379:6379"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-gamepass123}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 20s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 0
    container_name: humor-game-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${API_PORT:-3001}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-humor_memory_game}
      DB_USER: ${DB_USER:-gameuser}
      DB_PASSWORD: ${DB_PASSWORD:-gamepass123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-gamepass123}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this}
      API_BASE_URL: ${API_BASE_URL:-/api}
      FRONTEND_URL: ${FRONTEND_URL:-http://frontend:80}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://frontend:80}
    # SECURITY: Backend port not exposed in production
    # ports:
    #   - "${API_PORT:-3001}:${API_PORT:-3001}"
    # Backend port exposed only for debugging - remove in production
    ports:
      - "3001:3001"
    networks:
      - backend-network
      - frontend-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Temporarily disable health check for testing
    # healthcheck:
    #   test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
    #   interval: 15s
    #   timeout: 10s
    #   retries: 10
    #   start_period: 30s
    # Health check temporarily disabled for testing

    # Frontend Web App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 0
    container_name: humor-game-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REACT_APP_API_BASE_URL: ${API_BASE_URL:-/api}
    # ports:
    #   - "3000:80"
    networks:
      - frontend-network
    depends_on:
      backend:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Wait for backend to be fully ready before starting nginx with env substitution
    command: >
      sh -c "
        echo 'Waiting for backend to be ready...' &&
        while ! nc -z backend 3001; do
          echo 'Backend not ready, waiting...' &&
          sleep 2;
        done &&
        echo 'Backend is ready! Starting nginx with env substitution...' &&
        /start.sh
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge



# version: '3.8'

# services:
#   # Frontend - Vanilla JS with Nginx
#   frontend:
#     build: 
#       context: ./frontend
#       dockerfile: Dockerfile
#     ports:
#       - "3000:80"
#     depends_on:
#       - backend
#     environment:
#       - REACT_APP_API_URL=http://localhost:3001/api
#     volumes:
#       - ./frontend/src:/app/src:ro
#     networks:
#       - humor-game-network

#   # Backend - Node.js API
#   backend:
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     ports:
#       - "3001:3001"
#     environment:
#       - NODE_ENV=development
#       - PORT=3001
#       - DB_HOST=postgres
#       - DB_PORT=5432
#       - DB_NAME=humor_memory_game
#       - DB_USER=gameuser
#       - DB_PASSWORD=gamepass123
#       - REDIS_HOST=redis
#       - REDIS_PORT=6379
#       - CORS_ORIGIN=http://localhost:3000
#     depends_on:
#       - postgres
#       - redis
#     volumes:
#       - ./backend:/app
#       - /app/node_modules
#     command: npm run dev
#     networks:
#       - humor-game-network

#   # PostgreSQL Database
#   postgres:
#     image: postgres:15-alpine
#     environment:
#       POSTGRES_DB: humor_memory_game
#       POSTGRES_USER: gameuser
#       POSTGRES_PASSWORD: gamepass123
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ./database/combined-init.sql:/docker-entrypoint-initdb.d/01-combined-init.sql
#     networks:
#       - humor-game-network
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U gameuser -d humor_memory_game"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   # Redis Cache
#   redis:
#     image: redis:7-alpine
#     ports:
#       - "6379:6379"
#     volumes:
#       - redis_data:/data
#     networks:
#       - humor-game-network
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     command: redis-server --appendonly yes

# networks:
#   humor-game-network:
#     driver: bridge

# volumes:
#   postgres_data:
#     driver: local
#   redis_data:
#     driver: local